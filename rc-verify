#! /usr/bin/env bash

#MY_GIT_REPO=git@github.com:apache/accumulo
MY_GIT_REPO=https://gitbox.apache.org/repos/asf/fluo
MY_STAGING_REPO_BASE=https://repository.apache.org/content/repositories
MY_RC_PROJECT=orgapachefluo

# Usage: $0 <candidateNumber>
main() {
  local cnum; [[ -n "$1" ]] && cnum=$1
  while [[ -z "$cnum" ]]; do
    read -p 'Enter the staging repository number: ' cnum
  done
  local candidate=$MY_RC_PROJECT-$cnum

  local branch; [[ -n "$2" ]] && branch=$2
  while [[ -z "$branch" ]]; do
    read -p 'Enter the git branch for this release candidate: ' branch
  done

  local commit; [[ -n "$3" ]] && commit=$3
  while [[ -z "$commit" ]]; do
    read -p 'Enter the git commit for this release candidate: ' commit
  done

  # must in in slash or wget gets confused with --no-parent
  local url=$MY_STAGING_REPO_BASE/$candidate/
  local tmpdir=/var/tmp/$USER/$candidate
  local testsDir; testsDir="$(pwd)/tests"

  (mkdir -p "$tmpdir"/download && cd "$tmpdir" && download "$url" && verify "$branch" "$commit" "$testsDir")
}

# colorize mvn output
mvn() {
  trap 'echo -n "\033[m"' SIGHUP SIGINT SIGTERM
  command mvn "$@" --fail-at-end 2>&1 | tee -a "$tmpdir"/maven-log.txt | awk '
    BEGIN { IGNORECASE=1 }
    /BUILD SUCCESS/ { print "\033[1;36m" $0 "\033[m" ; next }
    /^\[FATAL\]/    { print "\033[1;31m" $0 "\033[m" ; next }
    /^\[ERROR\]/    { print "\033[1;31m" $0 "\033[m" ; next }
    /^\[TRACE\]/    { print "\033[2;33m" $0 "\033[m" ; next }
    /^\[WARNING\]/  { print "\033[1;33m" $0 "\033[m" ; next }
    /^\[DEBUG\]/    { print "\033[2;34m" $0 "\033[m" ; next }
    /^\[INFO\]/     { print "\033[0;37m" $0 "\033[m" ; next }
    /^\[ALL\]/      { print "\033[1;37m" $0 "\033[m" ; next }
    { print }
  '
  return "${PIPESTATUS[0]}"
}

green() { echo -e '\e[0;32m'"$*"'\e[0m'; }
yellow() { echo -e '\e[0;33m'"$*"'\e[0m'; }
red() { echo -e '\e[0;31m'"$*"'\e[0m'; }

# Usage: echo $(outof <expected> <actual>)
outof() {
  [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && red BUG-IN-SCRIPT && return 1
  local color=green; [[ $1 -eq $2 ]] || color=red
  echo "$($color "$2")"/"$(yellow "$1")"
}

# Usage: printHashSummary sha1|md5 <expectedHashes>
printHashSummary() {
  local type=${1,,}
  local expected=$2
  local actual; actual=$(wc -l <"${type^^}"SUM)
  local verified; verified=$("${type}"sum -c "${type^^}"SUM 2>/dev/null| grep -c 'OK$')
  echo -n "Found $(outof "$expected" "$actual") $type hashes (ignoring GPG signatures). "
  echo "Verified $(outof "$actual" "$verified")."
}

# Usage: download <url>
download() {
  local url=$1
  if [[ ! -e .download-complete ]]; then
    echo "Downloading $(yellow "$url")..."
    wget -erobots=off --no-verbose \
      --recursive --level inf --no-parent --no-host-directories \
      --reject 'index.html,index.html.tmp,maven-metadata.xml*,archetype-catalog.xml' \
      -P download \
      "$url" \
    && touch .download-complete
    if [[ $? -ne 0 ]]; then
      echo "Unable to download from $(red "$url")"
      exit 1
    fi
  fi
  echo "Download of $(yellow "$url") complete."
}

verifyHashes() {
  local filecount=$1
  local file type
  local files; files=$(find download/ -type f \! -name '*.sha1' \! -name '*.md5' \! -name '*.asc' | sort)
  for type in md5 sha1; do
    rm -f ${type^^}SUM
    touch ${type^^}SUM
    for file in $files; do
      if [[ -r "$file.$type" ]]; then
        echo "$(cat "$file.$type") *$file">>"${type^^}"SUM
      else
        echo "Missing $(red "$(pwd)/$file.$type")"
      fi
    done
    printHashSummary $type "$filecount"
  done
}

verifyDetachedSignatures() {
  local file
  local sigs=$1
  local goodsigs; goodsigs=$(for file in $(find download/ -name '*.asc'); do
    gpg2 --verify "$file"
  done 2>&1 | sort | uniq -c | grep 'Good signature' | awk '{print $1}')
  [[ -n "$goodsigs" ]] || goodsigs=0
  echo "Verified $(outof "$sigs" "$goodsigs") detached GPG signatures."
}

verifyRPMSignatures() {
  local rpms; rpms=$(find download/ -name '*.rpm' | wc -l)
  local goodrpms=0
  echo "Found $(yellow "$rpms") RPMs. Checking GPG signatures..."
  local file
  for file in $(find download/ -name '*.rpm'); do
    rpm --checksig "$file" >/dev/null
    if [[ 0 -eq $? ]]; then
      local goodrpms=$((goodrpms+1))
    else
      local pubkey; pubkey=$(rpm --checksig "$file" | grep -o '#........')
      gpg2 --armor --export "${pubkey#?}" > gpg-pubkey-"${pubkey#?}"
      echo "Unable to verify download/**/$(red "$(basename "$file")"). Import GPG key with:"
      yellow sudo rpm --import "$(pwd)/gpg-pubkey-${pubkey#?}"
    fi
  done

  echo "Verified $(outof "$rpms" "$goodrpms") RPM signatures."
}

verifyJars() {
  local commit=$1
  local numSources; numSources=$(find download/ -name '*-sources.jar' | wc -l)
  local numJavadoc; numJavadoc=$(find download/ -name '*-javadoc.jar' | wc -l)
  local numRegular; numRegular=$(find download/ -name '*.jar' \! -name '*-sources.jar' \! -name '*-javadoc.jar' | wc -l)
  echo "Found $(green "$numRegular") jars."
  echo "Found $(outof "$numRegular" "$numSources") expected sources."
  find download/ -name '*.jar' \! -name '*-sources.jar' \! -name '*-javadoc.jar' -exec bash -c '! test -f $(dirname "'{}'")/$(basename "'{}'" .jar)-sources.jar' \; -exec echo -e 'Missing -sources.jar for \e[0;31m'{}'\e[0m' \;
  find download/ -name '*-sources.jar' -exec bash -c '! test -f $(dirname "'{}'")/$(basename "'{}'" -sources.jar).jar' \; -exec echo -e 'Extra source jar: \e[0;31m'{}'\e[0m' \;
  echo "Found $(outof "$numRegular" "$numJavadoc") expected javadoc."
  find download/ -name '*.jar' \! -name '*-sources.jar' \! -name '*-javadoc.jar' -exec bash -c '! test -f $(dirname "'{}'")/$(basename "'{}'" .jar)-javadoc.jar' \; -exec echo -e 'Missing -javadoc.jar for \e[0;31m'{}'\e[0m' \;
  find download/ -name '*-javadoc.jar' -exec bash -c '! test -f $(dirname "'{}'")/$(basename "'{}'" -javadoc.jar).jar' \; -exec echo -e 'Extra javadoc jar: \e[0;31m'{}'\e[0m' \;
  local file type
  local numSealed=0
  local numGoodBuildNum=0
  local numBadBuildNum=0
  local numDirtyBuildNum=0
  local m=META-INF/MANIFEST.MF
  for file in $(find download/ -name '*.jar' \! -name '*-sources.jar' \! -name '*-javadoc.jar'); do
    if jar tf "$file" | egrep -v '^(org/|org/apache/|org/apache/fluo/.*|META-INF/.*|web/.*)$'; then
      echo "$(red "$(basename "$file")") contains unexpected content."
    fi
    if rm -rf META-INF && jar xf "$file" $m && dos2unix $m &>/dev/null; then
      if grep -q '^Sealed: true$' $m; then
        local numSealed=$((numSealed+1))
      else
        echo "$(red "$file") is not sealed."
      fi
      local key; key=$(grep '^Implementation-Build: ' $m | cut -c 23-)
      if [[ $key == "$commit" ]]; then
        local numGoodBuildNum=$((numGoodBuildNum+1))
      elif [[ $key == "${commit}-dirty" ]]; then
        local numDirtyBuildNum=$((numDirtyBuildNum+1))
        echo "$(basename "$file") has $(yellow dirty) Implementation Build: $(yellow "$key") (probably maven-release-plugin)"
      else
        local numBadBuildNum=$((numBadBuildNum+1))
        echo "$(basename "$file") has $(red wrong) Implementation Build: $(red "$key")"
      fi
    else
      echo "$(red "$(basename "$file")") is not sealed."
      echo "$(red "$(basename "$file")") does not specify a build number."
    fi
  done
  rm -rf META-INF
  echo "Verified $(outof "$numRegular" "$numSealed") jars are sealed."
  echo "$(outof "$numRegular" "$numGoodBuildNum") jars match $(yellow "$commit")"
  echo "$(outof 0 "$numDirtyBuildNum") jars match $(yellow "$commit")-dirty"
  echo "$(outof 0 "$numBadBuildNum") jars do not match $(yellow "$commit")"
}

verifySourceTarball() {
  local branch=$1
  local commit=$2
  local numSrc; numSrc=$(find download/ -type f -name '*-source-release.tar.gz' | wc -l)
  echo "Found $(outof 1 "$numSrc") expected source tarballs."
  local tarball; tarball=$(find download/ -type f -name '*-source-release.tar.gz')
  echo "Extracting the source tarball..."
  rm -rf src && mkdir src && tar -C src -x -f "$tarball"
  echo "Cloning and checking out branch $(yellow "$branch")..."
  rm -rf git git-export && git clone --no-checkout --separate-git-dir=git "$MY_GIT_REPO" git-export && (cd git-export && (git checkout -b "$branch"-test refs/tags/"$branch" || git checkout -b "$branch"-test origin/"$branch")) && rm -f git-export/.git && find git-export -type f -name '.gitignore' -exec rm -f {} \;
  echo "Comparing the following git branch to the source tarball:"
  git --git-dir=git log --graph -n1 --color --decorate "$branch"-test | head -1
  local head; head=$(git --git-dir=git log --no-color -n1 | head -1 | cut -c 8-)
  if [[ $head == "$commit" ]]; then
    echo "$(green HEAD) matches $(yellow "$commit")"
  else
    echo "$(red HEAD:"$head") does $(red NOT) match $(yellow "$commit")"
  fi
  diff -r --brief git-export/ src/*/
  if [[ $? -eq 0 ]]; then
    echo "Verified download/**/$(yellow "$(basename "$tarball")") matches git branch $(yellow "$branch")."
  else
    echo "$(red "$tarball") does not match $(red "$branch")."
  fi
}

verifyBinaryTarball() {
  local numBin; numBin=$(find download/ -type f -name '*-bin.tar.gz' | wc -l)
  echo "Found $(outof 1 "$numBin") expected binary tarballs."
  local tarball; tarball=$(find download/ -type f -name '*-bin.tar.gz')
  echo "Extracting the binary tarball..."
  rm -rf bin && mkdir bin && tar -C bin -x -f "$tarball"
  local file
  local numJars=0
  local count=0
  for file in $(find download/ -name '*.jar' \! -name '*-sources.jar' \! -name '*-javadoc.jar'); do
    local numJars=$((numJars+1))
    local lib; lib=(bin/*/lib/$(basename "${file%-*}").jar)
    if diff "$file" "${lib[0]}" >/dev/null; then
      local count=$((count+1))
      #echo "$(green "$file") matches $(yellow "${lib[0]}")"
    elif [[ -e "${lib[0]}" ]]; then
      echo "$(red "$file") does not match $(red "${lib[0]}")"
    else
      red "$(basename "$file") doesn't exist in lib"
    fi
  done
  echo "Verified $(outof $numJars $count) jars match the contents of the lib directory in the binary tarball."
}

verifyMvnBuild() {
  mvn --version
  local h s
  for s in '-DskipTests' ''; do
    local t=''; [[ -n "$s" ]] && t='out'
    echo "Verifying src/* builds with$t tests ($(yellow mvn clean verify -Dtimeout.factor=2 "$s"))"
    (cd src/* && mvn clean verify $s | egrep '(BUILD|ERROR|WARNING)')
  done
}

verifyTests() {
  local branch=$1
  local testsDir=$2
  local regex=".*([0-9][.][0-9][.][0-9]).*"
  [[ $branch =~ $regex ]]
  local version="${BASH_REMATCH[1]}"
  for script in "$testsDir"/*; do
    [[ -f "$script" ]] && [[ -x "$script" ]] && "$script" "$version"
  done
}

verify() {
  local branch=$1
  local commit=$2
  local testsDir=$3
  local filecount; filecount=$(find download/ -type f \! -name '*.sha1' \! -name '*.md5' | wc -l)
  local sigs; sigs=$(find download/ -type f -name '*.asc' | wc -l)
  local regular=$((filecount-sigs))
  local color=green; [[ "$regular" -eq "$sigs" ]] || color=red
  echo "Found $($color "$filecount") files: $($color "$regular") artifacts, $($color "$sigs") detached GPG signatures."
  verifyHashes "$regular"
  verifyDetachedSignatures "$sigs"
  verifyRPMSignatures
  verifyJars "$commit"
  verifyBinaryTarball
  verifySourceTarball "$branch" "$commit"
  verifyMvnBuild
  verifyTests "$branch" "$testsDir"
}

umask 0022
main "$@"
#Debugging global variables
#env | egrep -v '^[A-Z_]*=' | sort
