#! /usr/bin/env bash

#MY_GIT_REPO=git@github.com:apache/accumulo
MY_GIT_REPO=https://git-wip-us.apache.org/repos/asf/accumulo
MY_STAGING_REPO_BASE=https://repository.apache.org/content/repositories
MY_RC_PROJECT=orgapacheaccumulo

# Usage: $0 <candidateNumber>
function main() {
  local cnum
  [ -n "$1" ] && local cnum=$1
  while [ -z "$cnum" ]; do
    read -p 'Enter the staging repository number: ' cnum
  done
  local candidate=$MY_RC_PROJECT-$cnum

  local branch
  [ -n "$2" ] && local branch=$2
  while [ -z "$branch" ]; do
    read -p 'Enter the git branch for this release candidate: ' branch
  done

  # must in in slash or wget gets confused with --no-parent
  local url=$MY_STAGING_REPO_BASE/$candidate/
  local tmpdir=/tmp/$USER-$candidate

  (mkdir -p $tmpdir/download && cd $tmpdir && download $url && verify $branch)
}

function green() { echo -e '\e[0;32m'$@'\e[0m'; }
function yellow() { echo -e '\e[0;33m'$@'\e[0m'; }
function red() { echo -e '\e[0;31m'$@'\e[0m'; }

# Usage: echo $(outof <expected> <actual>)
function outof() {
  [ -z "$1" ] || [ -z "$2" ] || [ -n "$3" ] && red BUG-IN-SCRIPT && return 1
  local color=green; [ "$1" = "$2" ] || local color=red
  echo $($color $2)/$(yellow $1)
}

# Usage: printHashSummary sha1|md5 <expectedHashes>
function printHashSummary() {
  local type=${1,,}
  local expected=$2
  local actual=$(wc -l <${type^^}SUM)
  local verified=$(${type}sum -c ${type^^}SUM 2>/dev/null| grep 'OK$' | wc -l)
  echo -n Found $(outof $expected $actual) ${type} hashes.' '
  echo Verified $(outof $actual $verified).
}

# Usage: download <url>
function download() {
  local url=$1
  if [ ! -e .download-complete ]; then
    echo Downloading $(yellow $url)...
    wget -erobots=off --no-verbose \
      --recursive --level inf --no-parent --no-host-directories \
      --reject 'index.html,maven-metadata.xml*,archetype-catalog.xml' \
      -P download \
      $url \
    && touch .download-complete
    if [ ! "$?" = 0 ]; then
      echo Unable to download from $(red $url)
      exit 1
    fi
  fi
  echo Download of $(yellow $url) complete.
}

function verifyHashes() {
  local filecount=$1
  local file type
  local files=$(find download -type f | egrep -v '\.(sha1|md5)$' | sort)
  for type in md5 sha1; do
    rm -f ${type^^}SUM
    touch ${type^^}SUM
    for file in $files; do
      if [ -r "$file.$type" ]; then
        echo "$(cat $file.$type)  $file">>${type^^}SUM
      else
        echo "Missing $(red $(pwd)/$file.$type)"
      fi
    done
    printHashSummary $type $filecount
  done
}

function verifyDetachedSignatures() {
  local file
  local sigs=$1
  local goodsigs=$(for file in $(find download -name '*.asc'); do
    gpg --verify $file
  done 2>&1 | sort | uniq -c | grep 'Good signature' | awk '{print $1}')
  [ -n "$goodsigs" ] || local goodsigs=0
  echo Verified $(outof $sigs $goodsigs) detached GPG signatures.
}

function verifyRPMSignatures() {
  local rpms=$(find download -name '*.rpm' | wc -l)
  local goodrpms=0
  echo Found $(yellow $rpms) RPMs. Checking GPG signatures...
  local file
  for file in $(find download -name '*.rpm'); do
    rpm --checksig $file >/dev/null
    if [ '0' = "$?" ]; then
      local goodrpms=$((goodrpms+1))
    else
      local pubkey=$(rpm --checksig $file | grep -o '#........')
      gpg --armor --export ${pubkey#?} > gpg-pubkey-${pubkey#?}
      echo Unable to verify 'download/**'/$(red $(basename $file)). Import GPG key with:
      echo $(yellow sudo rpm --import $(pwd)/gpg-pubkey-${pubkey#?})
    fi
  done

  echo Verified $(outof $rpms $goodrpms) RPM signatures.
}

function verifyJars() {
  local numJars=$(find download -name '*.jar' | wc -l)
  local numSources=$(find download -name '*-sources.jar' | wc -l)
  local numJavadoc=$(find download -name '*-javadoc.jar' | wc -l)
  local numRegular=$(find download -name '*.jar' | egrep -v -- '-(sources|javadoc)[.]jar' | wc -l)
  local color=green; [ "$numJars" = "$((numRegular+numSources+numJavadoc))" ] || local color=red
  echo Found $($color $numJars) jars: $($color $numRegular) regular.
  echo Found $(outof $numRegular $numSources) expected sources.
  echo Found $(outof $numRegular $numJavadoc) expected javadoc.
  local file type
  local numSealed=0
  local m=META-INF/MANIFEST.MF
  for file in $(find download -name '*.jar' | egrep -v -- '-(sources|javadoc)[.]jar'); do
    if jar tf $file | egrep -v '^(org/|org/apache/|org/apache/accumulo/.*|META-INF/.*|web/.*)$'; then
      echo $(red $file) contains unexpected content.
    fi
    if rm -rf META-INF && jar xf $file $m && dos2unix $m &>/dev/null && cat $m | grep -q '^Sealed: true$'; then
      local numSealed=$((numSealed+1))
    else
      echo $(red $file) is not sealed.
    fi
    for type in sources javadoc; do
      local f=${file%.jar}-$type.jar
      if [ ! -e "$f" ]; then echo Missing $(red $f)...;  fi
    done
  done
  rm -rf META-INF
  echo Verified $(outof $numRegular $numSealed) jars are sealed.
}

function verifySourceTarball() {
  local branch=$1
  local numSrc=$(find download -type f -name '*-src.tar.gz' | wc -l)
  echo Found $(outof 1 $numSrc) expected source tarballs.
  local tarball=$(find download -type f -name '*-src.tar.gz')
  echo Extracting the source tarball...
  rm -rf src && mkdir src && tar -C src -x -f $tarball
  echo Cloning and checking out branch $(yellow $branch)...
  rm -rf git git-export && git clone --no-checkout --separate-git-dir=git $MY_GIT_REPO git-export && (cd git-export && git checkout -b $branch origin/$branch) && rm -f git-export/.git git-export/.gitignore
  echo Comparing the following git branch to the source tarball:
  git --git-dir=git log --graph -n1 --color --decorate $branch | head -1
  diff -r --brief git-export/ src/*/
  if [ "$?" = 0 ]; then
    echo Verified 'download/**/'$(yellow $(basename $tarball)) matches git branch $(yellow $branch).
  else
    echo $(red $tarball) does not match $(red $branch).
  fi
}

function verifyBinaryTarball() {
  local numBin=$(find download -type f -name '*-bin.tar.gz' | wc -l)
  echo Found $(outof 1 $numBin) expected binary tarballs.
  local tarball=$(find download -type f -name '*-bin.tar.gz')
  echo Extracting the binary tarball...
  rm -rf bin && mkdir bin && tar -C bin -x -f $tarball
  local file
  local numJars=0
  local count=0
  for file in $(find download -name '*.jar' | egrep -v -- '-(sources|javadoc)[.]jar'); do
    local numJars=$((numJars+1))
    local lib=bin/*/lib/$(basename ${file%-*}).jar
    if diff $file $lib >/dev/null; then
      local count=$((count+1))
    else
      echo $(red $file) does not match $(red $lib)
    fi
  done
  echo Verified $(outof $numJars $count) jars match the contents of the lib directory in the binary tarball.
}

function verifyMvnBuild() {
  mvn --version
  local h s
  for s in ' -DskipTests' ''; do
    for h in 1 2; do
      local t=
      [ -n "$s" ] && local t='out'
      echo Verifying src/* builds with$t tests on Hadoop $h '('$(yellow mvn clean verify -Dhadoop.profile=$h$s)')'
      (cd src/* && mvn clean verify -Dhadoop.profile=$h $s | egrep '(BUILD|ERROR|WARNING)')
    done
  done
}

function verify() {
  local branch=$1
  local filecount=$(find download -type f | egrep -v '\.(sha1|md5)$' | wc -l)
  local sigs=$(find download -type f -name '*.asc' | wc -l)
  local regular=$((filecount-sigs))
  local color=green; [ "$regular" = "$sigs" ] || local color=red
  echo Found $($color $filecount) files: $($color $regular) artifacts, $($color $sigs) detached GPG signatures.
  verifyHashes $filecount
  verifyDetachedSignatures $sigs
  verifyRPMSignatures
  verifyJars
  verifyBinaryTarball
  verifySourceTarball $branch
  verifyMvnBuild
}

main $@
#Debugging global variables
#env | egrep -v '^[A-Z_]*=' | sort
